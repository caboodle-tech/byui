<?php

if ( is_cli() === true && http_response_code() === false ) {
    
    // Make sure we are in the proper directory for the compiler to work or bail.
    $cwd = getcwd();
    $cwd = substr( $cwd, strrpos( $cwd, '/' ) + 1 );
    if ( $cwd == 'bin' ) {
        chdir ( '../' );
    } elseif ( $cwd != 'byui' ) {
        echo "\033[0;31mYou must run the compiler from the bin directory or the projects root (byui) directory.\033[0m" . PHP_EOL;
        die();
    }

    // Attempt to record the command the user ran.
    $cmd = '';
    if ( $argc > 1 ) {
        $cmd = $argv[1];
    }

    // Attempt to run the command.
    switch ( $cmd ) {
        case '-h':
        case '--h':
        case '-help':
        case '--help':
        case 'list':
            show_commands();
            break;
        case 'compile:dev':
            compile_dev();
            break;
        case 'compile:rel':
        case 'compile:release':
            compile_release();
            break;
        default:
            if ( strlen( $cmd ) < 1 ) {
                // No command given show available commands.
                show_commands();
            } else {
                // Invalid command.
                echo "Command not recognized. Run\033[1;33m cli --help\033[0m to see available commands." . PHP_EOL;
            }
            break;
    }

} else {

    // Command line usage was not detected. Show warning and die.
    echo 'This compiler can only be used via command line for security purposes.';
    die();

}

function compile( $file, $path, $parts ) {

    // Load the file.
    ob_start();
    require $file;
    $content = ob_get_clean();

    // Create the relative path.
    $relative = '';
    $count    = substr_count( $path, DIRECTORY_SEPARATOR ) - 1;
    while( $count > 0 ) {
        $relative .= '../';
        $count--;
    }

    // Update template parts.
    $parts['HEAD'] = str_replace( '{{PATH}}', $relative, $parts['HEAD'] );
    $parts['HEAD'] = str_replace( '{{AUTHOR}}', $author, $parts['HEAD'] );
    $parts['HEAD'] = str_replace( '{{DESCRIPTION}}', $description, $parts['HEAD'] );
    $parts['HEAD'] = str_replace( '{{KEYWORDS}}', $keywords, $parts['HEAD'] );
    $parts['HEAD'] = str_replace( '{{TITLE}}', $title, $parts['HEAD'] );
    $parts['FOOTER'] = str_replace( '{{PATH}}', $relative, $parts['FOOTER'] );

    // Apply the template parts to the file.
    $content = str_replace( '{{PATH}}', $relative, $content );
    $content = str_replace( '{{HEAD}}', $parts['HEAD'], $content );
    $content = str_replace( '{{FOOTER}}', $parts['FOOTER'], $content );

    // Save the compiled file.
    $path = str_replace( '.phtml', '.html', $file );
    file_put_contents( $path, $content );

}

function compile_dev() {
    
    // Load the template parts into an associative array.
    $templates = scandir( 'templates' );
    $templates = array_diff( $templates, array( '.', '..' ) );
    foreach ( $templates as $template ) {
        $name = basename( $template, '.phtml' );
        $parts[ strtoupper( $name ) ] = file_get_contents( 'templates/' . $template );
    }

    // Compile the main index file.
    compile( 'index.phtml', '', $parts );

    // Recursively compile all the cousre files.
    recursive_compile( 'courses', $parts );

}

function compile_release() {

    compile_dev();

    // Make release dir if its missing.
    @mkdir( 'release' );

    // Make .gitkeep for release directory if its missing.
    file_put_contents( 'release/.gitkeep', '' );    

    // Copy to release entire directories we need.
    $dirs = [ 'assets', 'css', 'fonts', 'js' ];
    foreach ( $dirs as $dir ) {
        recurse_copy( $dir, 'release' );
    }

    // Copy main index file.
    copy( 'index.html', 'release/index.html' );

    // Copy main license files and read-me.
    $licenses = [ 'LICENSE', 'LICENSE-BSD-3', 'LICENSE-CC-BY-NC-SA', 'README.md' ];
    foreach ( $licenses as $license ) {
        copy( $license, 'release/' . $license );
    }

    // Loop through course directory and keep only the file types we want.
    $limit = [ 'html', 'css', 'zip', '7z', 'png', 'jpg', 'jpeg' ];
    recurse_copy( 'courses', 'release', $limit );
    
}

// Check if the user is using a CLI.
function is_cli(){
    if ( defined('STDIN') ){ return true; }
    if ( php_sapi_name() === 'cli' ){ return true; }
    if ( array_key_exists('SHELL', $_ENV) ){ return true; }
    if ( empty($_SERVER['REMOTE_ADDR']) AND !isset($_SERVER['HTTP_USER_AGENT']) AND count($_SERVER['argv']) > 0){ return true; }
    if ( !array_key_exists('REQUEST_METHOD', $_SERVER) ){ return true; }
    return false;
}

function recursive_compile( $dir, $parts ) {

    $files   = scandir( $dir );
    $dir_sep = DIRECTORY_SEPARATOR;

    foreach ( $files as $key => $value ) {
        $path = realpath( $dir . $dir_sep . $value );
        if ( ! is_dir( $path ) ) {
            // Do not try to compile a non-phtml file.
            if ( strpos( $value, '.phtml' ) > -1 ) {
                $relative = '..' . $dir_sep . $dir . $dir_sep;
                compile( $path, $relative, $parts );
            }
        } elseif ( $value != '.' && $value != '..' ) {
            recursive_compile( $dir . $dir_sep . $value, $parts );
        }
    }

}

// https://stackoverflow.com/a/2050909/3193156
function recurse_copy( $src, $dst, $limit = [] ) {
    $dir     = opendir( $src );
    $dir_sep = DIRECTORY_SEPARATOR;
    $dst_dir = $dst . $dir_sep . $src;
    @mkdir( $dst_dir );
    while( false !== ( $file = readdir( $dir ) ) ) {
        if ( $file != '.'  && $file != '..' ) {
            $from = $src . $dir_sep . $file;
            //echo "$from >>> $to" . PHP_EOL . PHP_EOL;
            if ( is_dir( $from) ) {
                //echo "recurse_copy( $from, $dst )" . PHP_EOL;
                recurse_copy( $from, $dst, $limit );
            } else {
                $to = $dst_dir . $dir_sep . $file;
                //echo "copy( $from, $to )" . PHP_EOL;
                if ( count( $limit ) > 0 ) {
                    $ext = substr( $to, strpos( $to, '.' ) + 1 );
                    if ( in_array( $ext, $limit ) ) {
                        copy( $from, $to );
                    }
                } else {
                    copy( $from, $to );
                }
            }
        }
    }
    closedir( $dir );
} 

function show_commands() {
    echo 'Showing command list is not implemented yet.' . PHP_EOL;
}
?>